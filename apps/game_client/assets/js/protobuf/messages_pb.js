// source: messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.GameStatus', null, global);
goog.exportSymbol('proto.ProjectileStatus', null, global);
goog.exportSymbol('proto.ProtoAttack', null, global);
goog.exportSymbol('proto.ProtoAttackParameters', null, global);
goog.exportSymbol('proto.ProtoBountyInfo', null, global);
goog.exportSymbol('proto.ProtoBush', null, global);
goog.exportSymbol('proto.ProtoChangeTickrate', null, global);
goog.exportSymbol('proto.ProtoClientConfig', null, global);
goog.exportSymbol('proto.ProtoConfigCharacter', null, global);
goog.exportSymbol('proto.ProtoConfigGame', null, global);
goog.exportSymbol('proto.ProtoConfigMap', null, global);
goog.exportSymbol('proto.ProtoConfigServerUpdate', null, global);
goog.exportSymbol('proto.ProtoConfigSkill', null, global);
goog.exportSymbol('proto.ProtoConfiguration', null, global);
goog.exportSymbol('proto.ProtoCrate', null, global);
goog.exportSymbol('proto.ProtoCrateStatus', null, global);
goog.exportSymbol('proto.ProtoCurrencyReward', null, global);
goog.exportSymbol('proto.ProtoDirection', null, global);
goog.exportSymbol('proto.ProtoEffect', null, global);
goog.exportSymbol('proto.ProtoEntity', null, global);
goog.exportSymbol('proto.ProtoEntity.AditionalInfoCase', null, global);
goog.exportSymbol('proto.ProtoGameAction', null, global);
goog.exportSymbol('proto.ProtoGameAction.ActionTypeCase', null, global);
goog.exportSymbol('proto.ProtoGameEvent', null, global);
goog.exportSymbol('proto.ProtoGameEvent.EventCase', null, global);
goog.exportSymbol('proto.ProtoGameFinished', null, global);
goog.exportSymbol('proto.ProtoGameJoined', null, global);
goog.exportSymbol('proto.ProtoGameState', null, global);
goog.exportSymbol('proto.ProtoItem', null, global);
goog.exportSymbol('proto.ProtoJoinedLobby', null, global);
goog.exportSymbol('proto.ProtoKillEntry', null, global);
goog.exportSymbol('proto.ProtoLeaveLobby', null, global);
goog.exportSymbol('proto.ProtoLeftLobby', null, global);
goog.exportSymbol('proto.ProtoLobbyEvent', null, global);
goog.exportSymbol('proto.ProtoLobbyEvent.EventCase', null, global);
goog.exportSymbol('proto.ProtoMove', null, global);
goog.exportSymbol('proto.ProtoObstacle', null, global);
goog.exportSymbol('proto.ProtoPingUpdate', null, global);
goog.exportSymbol('proto.ProtoPlayer', null, global);
goog.exportSymbol('proto.ProtoPlayerAction', null, global);
goog.exportSymbol('proto.ProtoPlayerActionType', null, global);
goog.exportSymbol('proto.ProtoPool', null, global);
goog.exportSymbol('proto.ProtoPoolStatus', null, global);
goog.exportSymbol('proto.ProtoPosition', null, global);
goog.exportSymbol('proto.ProtoPowerUp', null, global);
goog.exportSymbol('proto.ProtoPowerUpstatus', null, global);
goog.exportSymbol('proto.ProtoProjectile', null, global);
goog.exportSymbol('proto.ProtoSelectBounty', null, global);
goog.exportSymbol('proto.ProtoToggleBots', null, global);
goog.exportSymbol('proto.ProtoToggleZone', null, global);
goog.exportSymbol('proto.ProtoTrap', null, global);
goog.exportSymbol('proto.ProtoTrapStatus', null, global);
goog.exportSymbol('proto.ProtoUseItem', null, global);
goog.exportSymbol('proto.ProtoZone', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoDirection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoDirection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoDirection.displayName = 'proto.ProtoDirection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPosition.displayName = 'proto.ProtoPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoLobbyEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoLobbyEvent.oneofGroups_);
};
goog.inherits(proto.ProtoLobbyEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoLobbyEvent.displayName = 'proto.ProtoLobbyEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoLeaveLobby = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoLeaveLobby, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoLeaveLobby.displayName = 'proto.ProtoLeaveLobby';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoLeftLobby = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoLeftLobby, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoLeftLobby.displayName = 'proto.ProtoLeftLobby';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoJoinedLobby = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoJoinedLobby, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoJoinedLobby.displayName = 'proto.ProtoJoinedLobby';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoGameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoGameEvent.oneofGroups_);
};
goog.inherits(proto.ProtoGameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoGameEvent.displayName = 'proto.ProtoGameEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoGameFinished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoGameFinished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoGameFinished.displayName = 'proto.ProtoGameFinished';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPingUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoPingUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPingUpdate.displayName = 'proto.ProtoPingUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoGameJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoGameJoined.repeatedFields_, null);
};
goog.inherits(proto.ProtoGameJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoGameJoined.displayName = 'proto.ProtoGameJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoConfiguration.repeatedFields_, null);
};
goog.inherits(proto.ProtoConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoConfiguration.displayName = 'proto.ProtoConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoConfigGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoConfigGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoConfigGame.displayName = 'proto.ProtoConfigGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoConfigMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoConfigMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoConfigMap.displayName = 'proto.ProtoConfigMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoConfigCharacter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoConfigCharacter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoConfigCharacter.displayName = 'proto.ProtoConfigCharacter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoClientConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoClientConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoClientConfig.displayName = 'proto.ProtoClientConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoConfigServerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoConfigServerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoConfigServerUpdate.displayName = 'proto.ProtoConfigServerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoConfigSkill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoConfigSkill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoConfigSkill.displayName = 'proto.ProtoConfigSkill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoGameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoGameState.repeatedFields_, null);
};
goog.inherits(proto.ProtoGameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoGameState.displayName = 'proto.ProtoGameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoEntity.repeatedFields_, proto.ProtoEntity.oneofGroups_);
};
goog.inherits(proto.ProtoEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoEntity.displayName = 'proto.ProtoEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoPlayer.repeatedFields_, null);
};
goog.inherits(proto.ProtoPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPlayer.displayName = 'proto.ProtoPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoEffect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoEffect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoEffect.displayName = 'proto.ProtoEffect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoItem.displayName = 'proto.ProtoItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoProjectile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoProjectile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoProjectile.displayName = 'proto.ProtoProjectile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoObstacle.displayName = 'proto.ProtoObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPowerUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoPowerUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPowerUp.displayName = 'proto.ProtoPowerUp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoCrate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoCrate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoCrate.displayName = 'proto.ProtoCrate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoPool.repeatedFields_, null);
};
goog.inherits(proto.ProtoPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPool.displayName = 'proto.ProtoPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoBush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoBush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoBush.displayName = 'proto.ProtoBush';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoTrap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoTrap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoTrap.displayName = 'proto.ProtoTrap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoPlayerAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoPlayerAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoPlayerAction.displayName = 'proto.ProtoPlayerAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoMove.displayName = 'proto.ProtoMove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoAttack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoAttack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoAttack.displayName = 'proto.ProtoAttack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoAttackParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoAttackParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoAttackParameters.displayName = 'proto.ProtoAttackParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoUseItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoUseItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoUseItem.displayName = 'proto.ProtoUseItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoSelectBounty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoSelectBounty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoSelectBounty.displayName = 'proto.ProtoSelectBounty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoToggleZone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoToggleZone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoToggleZone.displayName = 'proto.ProtoToggleZone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoToggleBots = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoToggleBots, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoToggleBots.displayName = 'proto.ProtoToggleBots';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoChangeTickrate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoChangeTickrate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoChangeTickrate.displayName = 'proto.ProtoChangeTickrate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoGameAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoGameAction.oneofGroups_);
};
goog.inherits(proto.ProtoGameAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoGameAction.displayName = 'proto.ProtoGameAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoZone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoZone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoZone.displayName = 'proto.ProtoZone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoKillEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoKillEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoKillEntry.displayName = 'proto.ProtoKillEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoBountyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoBountyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoBountyInfo.displayName = 'proto.ProtoBountyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoCurrencyReward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoCurrencyReward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProtoCurrencyReward.displayName = 'proto.ProtoCurrencyReward';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoDirection.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoDirection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoDirection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoDirection.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoDirection}
 */
proto.ProtoDirection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoDirection;
  return proto.ProtoDirection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoDirection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoDirection}
 */
proto.ProtoDirection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoDirection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoDirection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoDirection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoDirection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.ProtoDirection.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoDirection} returns this
 */
proto.ProtoDirection.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.ProtoDirection.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoDirection} returns this
 */
proto.ProtoDirection.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPosition}
 */
proto.ProtoPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPosition;
  return proto.ProtoPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPosition}
 */
proto.ProtoPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.ProtoPosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPosition} returns this
 */
proto.ProtoPosition.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.ProtoPosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPosition} returns this
 */
proto.ProtoPosition.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoLobbyEvent.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.ProtoLobbyEvent.EventCase = {
  EVENT_NOT_SET: 0,
  LEAVE: 1,
  LEFT: 2,
  JOINED: 3,
  GAME: 4
};

/**
 * @return {proto.ProtoLobbyEvent.EventCase}
 */
proto.ProtoLobbyEvent.prototype.getEventCase = function() {
  return /** @type {proto.ProtoLobbyEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.ProtoLobbyEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoLobbyEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoLobbyEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoLobbyEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoLobbyEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    leave: (f = msg.getLeave()) && proto.ProtoLeaveLobby.toObject(includeInstance, f),
    left: (f = msg.getLeft()) && proto.ProtoLeftLobby.toObject(includeInstance, f),
    joined: (f = msg.getJoined()) && proto.ProtoJoinedLobby.toObject(includeInstance, f),
    game: (f = msg.getGame()) && proto.ProtoGameState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoLobbyEvent}
 */
proto.ProtoLobbyEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoLobbyEvent;
  return proto.ProtoLobbyEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoLobbyEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoLobbyEvent}
 */
proto.ProtoLobbyEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoLeaveLobby;
      reader.readMessage(value,proto.ProtoLeaveLobby.deserializeBinaryFromReader);
      msg.setLeave(value);
      break;
    case 2:
      var value = new proto.ProtoLeftLobby;
      reader.readMessage(value,proto.ProtoLeftLobby.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 3:
      var value = new proto.ProtoJoinedLobby;
      reader.readMessage(value,proto.ProtoJoinedLobby.deserializeBinaryFromReader);
      msg.setJoined(value);
      break;
    case 4:
      var value = new proto.ProtoGameState;
      reader.readMessage(value,proto.ProtoGameState.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoLobbyEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoLobbyEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoLobbyEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoLobbyEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeave();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoLeaveLobby.serializeBinaryToWriter
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtoLeftLobby.serializeBinaryToWriter
    );
  }
  f = message.getJoined();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ProtoJoinedLobby.serializeBinaryToWriter
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ProtoGameState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoLeaveLobby leave = 1;
 * @return {?proto.ProtoLeaveLobby}
 */
proto.ProtoLobbyEvent.prototype.getLeave = function() {
  return /** @type{?proto.ProtoLeaveLobby} */ (
    jspb.Message.getWrapperField(this, proto.ProtoLeaveLobby, 1));
};


/**
 * @param {?proto.ProtoLeaveLobby|undefined} value
 * @return {!proto.ProtoLobbyEvent} returns this
*/
proto.ProtoLobbyEvent.prototype.setLeave = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ProtoLobbyEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoLobbyEvent} returns this
 */
proto.ProtoLobbyEvent.prototype.clearLeave = function() {
  return this.setLeave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoLobbyEvent.prototype.hasLeave = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtoLeftLobby left = 2;
 * @return {?proto.ProtoLeftLobby}
 */
proto.ProtoLobbyEvent.prototype.getLeft = function() {
  return /** @type{?proto.ProtoLeftLobby} */ (
    jspb.Message.getWrapperField(this, proto.ProtoLeftLobby, 2));
};


/**
 * @param {?proto.ProtoLeftLobby|undefined} value
 * @return {!proto.ProtoLobbyEvent} returns this
*/
proto.ProtoLobbyEvent.prototype.setLeft = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ProtoLobbyEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoLobbyEvent} returns this
 */
proto.ProtoLobbyEvent.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoLobbyEvent.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProtoJoinedLobby joined = 3;
 * @return {?proto.ProtoJoinedLobby}
 */
proto.ProtoLobbyEvent.prototype.getJoined = function() {
  return /** @type{?proto.ProtoJoinedLobby} */ (
    jspb.Message.getWrapperField(this, proto.ProtoJoinedLobby, 3));
};


/**
 * @param {?proto.ProtoJoinedLobby|undefined} value
 * @return {!proto.ProtoLobbyEvent} returns this
*/
proto.ProtoLobbyEvent.prototype.setJoined = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ProtoLobbyEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoLobbyEvent} returns this
 */
proto.ProtoLobbyEvent.prototype.clearJoined = function() {
  return this.setJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoLobbyEvent.prototype.hasJoined = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProtoGameState game = 4;
 * @return {?proto.ProtoGameState}
 */
proto.ProtoLobbyEvent.prototype.getGame = function() {
  return /** @type{?proto.ProtoGameState} */ (
    jspb.Message.getWrapperField(this, proto.ProtoGameState, 4));
};


/**
 * @param {?proto.ProtoGameState|undefined} value
 * @return {!proto.ProtoLobbyEvent} returns this
*/
proto.ProtoLobbyEvent.prototype.setGame = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ProtoLobbyEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoLobbyEvent} returns this
 */
proto.ProtoLobbyEvent.prototype.clearGame = function() {
  return this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoLobbyEvent.prototype.hasGame = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoLeaveLobby.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoLeaveLobby.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoLeaveLobby} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoLeaveLobby.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoLeaveLobby}
 */
proto.ProtoLeaveLobby.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoLeaveLobby;
  return proto.ProtoLeaveLobby.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoLeaveLobby} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoLeaveLobby}
 */
proto.ProtoLeaveLobby.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoLeaveLobby.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoLeaveLobby.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoLeaveLobby} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoLeaveLobby.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoLeftLobby.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoLeftLobby.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoLeftLobby} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoLeftLobby.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoLeftLobby}
 */
proto.ProtoLeftLobby.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoLeftLobby;
  return proto.ProtoLeftLobby.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoLeftLobby} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoLeftLobby}
 */
proto.ProtoLeftLobby.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoLeftLobby.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoLeftLobby.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoLeftLobby} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoLeftLobby.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoJoinedLobby.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoJoinedLobby.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoJoinedLobby} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoJoinedLobby.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoJoinedLobby}
 */
proto.ProtoJoinedLobby.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoJoinedLobby;
  return proto.ProtoJoinedLobby.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoJoinedLobby} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoJoinedLobby}
 */
proto.ProtoJoinedLobby.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoJoinedLobby.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoJoinedLobby.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoJoinedLobby} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoJoinedLobby.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoGameEvent.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.ProtoGameEvent.EventCase = {
  EVENT_NOT_SET: 0,
  JOINED: 1,
  UPDATE: 2,
  FINISHED: 3,
  PING: 4,
  TOGGLE_BOTS: 5
};

/**
 * @return {proto.ProtoGameEvent.EventCase}
 */
proto.ProtoGameEvent.prototype.getEventCase = function() {
  return /** @type {proto.ProtoGameEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.ProtoGameEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoGameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoGameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoGameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    joined: (f = msg.getJoined()) && proto.ProtoGameJoined.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.ProtoGameState.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && proto.ProtoGameFinished.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.ProtoPingUpdate.toObject(includeInstance, f),
    toggleBots: (f = msg.getToggleBots()) && proto.ProtoToggleBots.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoGameEvent}
 */
proto.ProtoGameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoGameEvent;
  return proto.ProtoGameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoGameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoGameEvent}
 */
proto.ProtoGameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoGameJoined;
      reader.readMessage(value,proto.ProtoGameJoined.deserializeBinaryFromReader);
      msg.setJoined(value);
      break;
    case 2:
      var value = new proto.ProtoGameState;
      reader.readMessage(value,proto.ProtoGameState.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 3:
      var value = new proto.ProtoGameFinished;
      reader.readMessage(value,proto.ProtoGameFinished.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    case 4:
      var value = new proto.ProtoPingUpdate;
      reader.readMessage(value,proto.ProtoPingUpdate.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 5:
      var value = new proto.ProtoToggleBots;
      reader.readMessage(value,proto.ProtoToggleBots.deserializeBinaryFromReader);
      msg.setToggleBots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoGameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoGameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoGameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoined();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoGameJoined.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtoGameState.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ProtoGameFinished.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ProtoPingUpdate.serializeBinaryToWriter
    );
  }
  f = message.getToggleBots();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ProtoToggleBots.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoGameJoined joined = 1;
 * @return {?proto.ProtoGameJoined}
 */
proto.ProtoGameEvent.prototype.getJoined = function() {
  return /** @type{?proto.ProtoGameJoined} */ (
    jspb.Message.getWrapperField(this, proto.ProtoGameJoined, 1));
};


/**
 * @param {?proto.ProtoGameJoined|undefined} value
 * @return {!proto.ProtoGameEvent} returns this
*/
proto.ProtoGameEvent.prototype.setJoined = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ProtoGameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameEvent} returns this
 */
proto.ProtoGameEvent.prototype.clearJoined = function() {
  return this.setJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameEvent.prototype.hasJoined = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtoGameState update = 2;
 * @return {?proto.ProtoGameState}
 */
proto.ProtoGameEvent.prototype.getUpdate = function() {
  return /** @type{?proto.ProtoGameState} */ (
    jspb.Message.getWrapperField(this, proto.ProtoGameState, 2));
};


/**
 * @param {?proto.ProtoGameState|undefined} value
 * @return {!proto.ProtoGameEvent} returns this
*/
proto.ProtoGameEvent.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ProtoGameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameEvent} returns this
 */
proto.ProtoGameEvent.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameEvent.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProtoGameFinished finished = 3;
 * @return {?proto.ProtoGameFinished}
 */
proto.ProtoGameEvent.prototype.getFinished = function() {
  return /** @type{?proto.ProtoGameFinished} */ (
    jspb.Message.getWrapperField(this, proto.ProtoGameFinished, 3));
};


/**
 * @param {?proto.ProtoGameFinished|undefined} value
 * @return {!proto.ProtoGameEvent} returns this
*/
proto.ProtoGameEvent.prototype.setFinished = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ProtoGameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameEvent} returns this
 */
proto.ProtoGameEvent.prototype.clearFinished = function() {
  return this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameEvent.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProtoPingUpdate ping = 4;
 * @return {?proto.ProtoPingUpdate}
 */
proto.ProtoGameEvent.prototype.getPing = function() {
  return /** @type{?proto.ProtoPingUpdate} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPingUpdate, 4));
};


/**
 * @param {?proto.ProtoPingUpdate|undefined} value
 * @return {!proto.ProtoGameEvent} returns this
*/
proto.ProtoGameEvent.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ProtoGameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameEvent} returns this
 */
proto.ProtoGameEvent.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameEvent.prototype.hasPing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProtoToggleBots toggle_bots = 5;
 * @return {?proto.ProtoToggleBots}
 */
proto.ProtoGameEvent.prototype.getToggleBots = function() {
  return /** @type{?proto.ProtoToggleBots} */ (
    jspb.Message.getWrapperField(this, proto.ProtoToggleBots, 5));
};


/**
 * @param {?proto.ProtoToggleBots|undefined} value
 * @return {!proto.ProtoGameEvent} returns this
*/
proto.ProtoGameEvent.prototype.setToggleBots = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ProtoGameEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameEvent} returns this
 */
proto.ProtoGameEvent.prototype.clearToggleBots = function() {
  return this.setToggleBots(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameEvent.prototype.hasToggleBots = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoGameFinished.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoGameFinished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoGameFinished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameFinished.toObject = function(includeInstance, msg) {
  var f, obj = {
    winner: (f = msg.getWinner()) && proto.ProtoEntity.toObject(includeInstance, f),
    playersMap: (f = msg.getPlayersMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoGameFinished}
 */
proto.ProtoGameFinished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoGameFinished;
  return proto.ProtoGameFinished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoGameFinished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoGameFinished}
 */
proto.ProtoGameFinished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoEntity;
      reader.readMessage(value,proto.ProtoEntity.deserializeBinaryFromReader);
      msg.setWinner(value);
      break;
    case 2:
      var value = msg.getPlayersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoGameFinished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoGameFinished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoGameFinished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameFinished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoEntity.serializeBinaryToWriter
    );
  }
  f = message.getPlayersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
};


/**
 * optional ProtoEntity winner = 1;
 * @return {?proto.ProtoEntity}
 */
proto.ProtoGameFinished.prototype.getWinner = function() {
  return /** @type{?proto.ProtoEntity} */ (
    jspb.Message.getWrapperField(this, proto.ProtoEntity, 1));
};


/**
 * @param {?proto.ProtoEntity|undefined} value
 * @return {!proto.ProtoGameFinished} returns this
*/
proto.ProtoGameFinished.prototype.setWinner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameFinished} returns this
 */
proto.ProtoGameFinished.prototype.clearWinner = function() {
  return this.setWinner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameFinished.prototype.hasWinner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<uint64, ProtoEntity> players = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameFinished.prototype.getPlayersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameFinished} returns this
 */
proto.ProtoGameFinished.prototype.clearPlayersMap = function() {
  this.getPlayersMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPingUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPingUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPingUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPingUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    latency: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPingUpdate}
 */
proto.ProtoPingUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPingUpdate;
  return proto.ProtoPingUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPingUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPingUpdate}
 */
proto.ProtoPingUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPingUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPingUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPingUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPingUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatency();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 latency = 1;
 * @return {number}
 */
proto.ProtoPingUpdate.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPingUpdate} returns this
 */
proto.ProtoPingUpdate.prototype.setLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoGameJoined.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoGameJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoGameJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoGameJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.ProtoConfiguration.toObject(includeInstance, f),
    bountiesList: jspb.Message.toObjectList(msg.getBountiesList(),
    proto.ProtoBountyInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoGameJoined}
 */
proto.ProtoGameJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoGameJoined;
  return proto.ProtoGameJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoGameJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoGameJoined}
 */
proto.ProtoGameJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.ProtoConfiguration;
      reader.readMessage(value,proto.ProtoConfiguration.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 3:
      var value = new proto.ProtoBountyInfo;
      reader.readMessage(value,proto.ProtoBountyInfo.deserializeBinaryFromReader);
      msg.addBounties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoGameJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoGameJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoGameJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtoConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getBountiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtoBountyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 player_id = 1;
 * @return {number}
 */
proto.ProtoGameJoined.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoGameJoined} returns this
 */
proto.ProtoGameJoined.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ProtoConfiguration config = 2;
 * @return {?proto.ProtoConfiguration}
 */
proto.ProtoGameJoined.prototype.getConfig = function() {
  return /** @type{?proto.ProtoConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.ProtoConfiguration, 2));
};


/**
 * @param {?proto.ProtoConfiguration|undefined} value
 * @return {!proto.ProtoGameJoined} returns this
*/
proto.ProtoGameJoined.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameJoined} returns this
 */
proto.ProtoGameJoined.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameJoined.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ProtoBountyInfo bounties = 3;
 * @return {!Array<!proto.ProtoBountyInfo>}
 */
proto.ProtoGameJoined.prototype.getBountiesList = function() {
  return /** @type{!Array<!proto.ProtoBountyInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoBountyInfo, 3));
};


/**
 * @param {!Array<!proto.ProtoBountyInfo>} value
 * @return {!proto.ProtoGameJoined} returns this
*/
proto.ProtoGameJoined.prototype.setBountiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtoBountyInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoBountyInfo}
 */
proto.ProtoGameJoined.prototype.addBounties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtoBountyInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoGameJoined} returns this
 */
proto.ProtoGameJoined.prototype.clearBountiesList = function() {
  return this.setBountiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoConfiguration.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && proto.ProtoConfigGame.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.ProtoConfigMap.toObject(includeInstance, f),
    charactersList: jspb.Message.toObjectList(msg.getCharactersList(),
    proto.ProtoConfigCharacter.toObject, includeInstance),
    clientConfig: (f = msg.getClientConfig()) && proto.ProtoClientConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoConfiguration}
 */
proto.ProtoConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoConfiguration;
  return proto.ProtoConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoConfiguration}
 */
proto.ProtoConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoConfigGame;
      reader.readMessage(value,proto.ProtoConfigGame.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 2:
      var value = new proto.ProtoConfigMap;
      reader.readMessage(value,proto.ProtoConfigMap.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 3:
      var value = new proto.ProtoConfigCharacter;
      reader.readMessage(value,proto.ProtoConfigCharacter.deserializeBinaryFromReader);
      msg.addCharacters(value);
      break;
    case 4:
      var value = new proto.ProtoClientConfig;
      reader.readMessage(value,proto.ProtoClientConfig.deserializeBinaryFromReader);
      msg.setClientConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoConfigGame.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtoConfigMap.serializeBinaryToWriter
    );
  }
  f = message.getCharactersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtoConfigCharacter.serializeBinaryToWriter
    );
  }
  f = message.getClientConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ProtoClientConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoConfigGame game = 1;
 * @return {?proto.ProtoConfigGame}
 */
proto.ProtoConfiguration.prototype.getGame = function() {
  return /** @type{?proto.ProtoConfigGame} */ (
    jspb.Message.getWrapperField(this, proto.ProtoConfigGame, 1));
};


/**
 * @param {?proto.ProtoConfigGame|undefined} value
 * @return {!proto.ProtoConfiguration} returns this
*/
proto.ProtoConfiguration.prototype.setGame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoConfiguration} returns this
 */
proto.ProtoConfiguration.prototype.clearGame = function() {
  return this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoConfiguration.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtoConfigMap map = 2;
 * @return {?proto.ProtoConfigMap}
 */
proto.ProtoConfiguration.prototype.getMap = function() {
  return /** @type{?proto.ProtoConfigMap} */ (
    jspb.Message.getWrapperField(this, proto.ProtoConfigMap, 2));
};


/**
 * @param {?proto.ProtoConfigMap|undefined} value
 * @return {!proto.ProtoConfiguration} returns this
*/
proto.ProtoConfiguration.prototype.setMap = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoConfiguration} returns this
 */
proto.ProtoConfiguration.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoConfiguration.prototype.hasMap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ProtoConfigCharacter characters = 3;
 * @return {!Array<!proto.ProtoConfigCharacter>}
 */
proto.ProtoConfiguration.prototype.getCharactersList = function() {
  return /** @type{!Array<!proto.ProtoConfigCharacter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoConfigCharacter, 3));
};


/**
 * @param {!Array<!proto.ProtoConfigCharacter>} value
 * @return {!proto.ProtoConfiguration} returns this
*/
proto.ProtoConfiguration.prototype.setCharactersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtoConfigCharacter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoConfigCharacter}
 */
proto.ProtoConfiguration.prototype.addCharacters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtoConfigCharacter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoConfiguration} returns this
 */
proto.ProtoConfiguration.prototype.clearCharactersList = function() {
  return this.setCharactersList([]);
};


/**
 * optional ProtoClientConfig client_config = 4;
 * @return {?proto.ProtoClientConfig}
 */
proto.ProtoConfiguration.prototype.getClientConfig = function() {
  return /** @type{?proto.ProtoClientConfig} */ (
    jspb.Message.getWrapperField(this, proto.ProtoClientConfig, 4));
};


/**
 * @param {?proto.ProtoClientConfig|undefined} value
 * @return {!proto.ProtoConfiguration} returns this
*/
proto.ProtoConfiguration.prototype.setClientConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoConfiguration} returns this
 */
proto.ProtoConfiguration.prototype.clearClientConfig = function() {
  return this.setClientConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoConfiguration.prototype.hasClientConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoConfigGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoConfigGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoConfigGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickRateMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    bountyPickTimeMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    startGameTimeMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoConfigGame}
 */
proto.ProtoConfigGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoConfigGame;
  return proto.ProtoConfigGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoConfigGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoConfigGame}
 */
proto.ProtoConfigGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTickRateMs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBountyPickTimeMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartGameTimeMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoConfigGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoConfigGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoConfigGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickRateMs();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getBountyPickTimeMs();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStartGameTimeMs();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float tick_rate_ms = 1;
 * @return {number}
 */
proto.ProtoConfigGame.prototype.getTickRateMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigGame} returns this
 */
proto.ProtoConfigGame.prototype.setTickRateMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float bounty_pick_time_ms = 2;
 * @return {number}
 */
proto.ProtoConfigGame.prototype.getBountyPickTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigGame} returns this
 */
proto.ProtoConfigGame.prototype.setBountyPickTimeMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float start_game_time_ms = 3;
 * @return {number}
 */
proto.ProtoConfigGame.prototype.getStartGameTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigGame} returns this
 */
proto.ProtoConfigGame.prototype.setStartGameTimeMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoConfigMap.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoConfigMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoConfigMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoConfigMap}
 */
proto.ProtoConfigMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoConfigMap;
  return proto.ProtoConfigMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoConfigMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoConfigMap}
 */
proto.ProtoConfigMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoConfigMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoConfigMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoConfigMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float radius = 1;
 * @return {number}
 */
proto.ProtoConfigMap.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigMap} returns this
 */
proto.ProtoConfigMap.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoConfigCharacter.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoConfigCharacter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoConfigCharacter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigCharacter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    baseSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    baseSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    baseHealth: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxInventorySize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    skillsMap: (f = msg.getSkillsMap()) ? f.toObject(includeInstance, proto.ProtoConfigSkill.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoConfigCharacter}
 */
proto.ProtoConfigCharacter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoConfigCharacter;
  return proto.ProtoConfigCharacter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoConfigCharacter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoConfigCharacter}
 */
proto.ProtoConfigCharacter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBaseSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBaseSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseHealth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxInventorySize(value);
      break;
    case 7:
      var value = msg.getSkillsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ProtoConfigSkill.deserializeBinaryFromReader, "", new proto.ProtoConfigSkill());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoConfigCharacter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoConfigCharacter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoConfigCharacter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigCharacter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBaseSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getBaseSize();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getBaseHealth();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMaxInventorySize();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSkillsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoConfigSkill.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ProtoConfigCharacter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool active = 2;
 * @return {boolean}
 */
proto.ProtoConfigCharacter.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional float base_speed = 3;
 * @return {number}
 */
proto.ProtoConfigCharacter.prototype.getBaseSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.setBaseSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float base_size = 4;
 * @return {number}
 */
proto.ProtoConfigCharacter.prototype.getBaseSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.setBaseSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint64 base_health = 5;
 * @return {number}
 */
proto.ProtoConfigCharacter.prototype.getBaseHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.setBaseHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 max_inventory_size = 6;
 * @return {number}
 */
proto.ProtoConfigCharacter.prototype.getMaxInventorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.setMaxInventorySize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * map<string, ProtoConfigSkill> skills = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ProtoConfigSkill>}
 */
proto.ProtoConfigCharacter.prototype.getSkillsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ProtoConfigSkill>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.ProtoConfigSkill));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoConfigCharacter} returns this
 */
proto.ProtoConfigCharacter.prototype.clearSkillsMap = function() {
  this.getSkillsMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoClientConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoClientConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoClientConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoClientConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverUpdate: (f = msg.getServerUpdate()) && proto.ProtoConfigServerUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoClientConfig}
 */
proto.ProtoClientConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoClientConfig;
  return proto.ProtoClientConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoClientConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoClientConfig}
 */
proto.ProtoClientConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoConfigServerUpdate;
      reader.readMessage(value,proto.ProtoConfigServerUpdate.deserializeBinaryFromReader);
      msg.setServerUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoClientConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoClientConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoClientConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoClientConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoConfigServerUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoConfigServerUpdate server_update = 1;
 * @return {?proto.ProtoConfigServerUpdate}
 */
proto.ProtoClientConfig.prototype.getServerUpdate = function() {
  return /** @type{?proto.ProtoConfigServerUpdate} */ (
    jspb.Message.getWrapperField(this, proto.ProtoConfigServerUpdate, 1));
};


/**
 * @param {?proto.ProtoConfigServerUpdate|undefined} value
 * @return {!proto.ProtoClientConfig} returns this
*/
proto.ProtoClientConfig.prototype.setServerUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoClientConfig} returns this
 */
proto.ProtoClientConfig.prototype.clearServerUpdate = function() {
  return this.setServerUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoClientConfig.prototype.hasServerUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoConfigServerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoConfigServerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoConfigServerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigServerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampDifferenceSamplesToCheckWarning: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestampDifferencesSamplesMaxLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    showWarningThreshold: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stopWarningThreshold: jspb.Message.getFieldWithDefault(msg, 4, 0),
    msWithoutUpdateShowWarning: jspb.Message.getFieldWithDefault(msg, 5, 0),
    msWithoutUpdateDisconnect: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoConfigServerUpdate}
 */
proto.ProtoConfigServerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoConfigServerUpdate;
  return proto.ProtoConfigServerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoConfigServerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoConfigServerUpdate}
 */
proto.ProtoConfigServerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampDifferenceSamplesToCheckWarning(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampDifferencesSamplesMaxLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShowWarningThreshold(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStopWarningThreshold(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsWithoutUpdateShowWarning(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsWithoutUpdateDisconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoConfigServerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoConfigServerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoConfigServerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigServerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampDifferenceSamplesToCheckWarning();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestampDifferencesSamplesMaxLength();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getShowWarningThreshold();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getStopWarningThreshold();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMsWithoutUpdateShowWarning();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMsWithoutUpdateDisconnect();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 timestamp_difference_samples_to_check_warning = 1;
 * @return {number}
 */
proto.ProtoConfigServerUpdate.prototype.getTimestampDifferenceSamplesToCheckWarning = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigServerUpdate} returns this
 */
proto.ProtoConfigServerUpdate.prototype.setTimestampDifferenceSamplesToCheckWarning = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp_differences_samples_max_length = 2;
 * @return {number}
 */
proto.ProtoConfigServerUpdate.prototype.getTimestampDifferencesSamplesMaxLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigServerUpdate} returns this
 */
proto.ProtoConfigServerUpdate.prototype.setTimestampDifferencesSamplesMaxLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 show_warning_threshold = 3;
 * @return {number}
 */
proto.ProtoConfigServerUpdate.prototype.getShowWarningThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigServerUpdate} returns this
 */
proto.ProtoConfigServerUpdate.prototype.setShowWarningThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 stop_warning_threshold = 4;
 * @return {number}
 */
proto.ProtoConfigServerUpdate.prototype.getStopWarningThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigServerUpdate} returns this
 */
proto.ProtoConfigServerUpdate.prototype.setStopWarningThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ms_without_update_show_warning = 5;
 * @return {number}
 */
proto.ProtoConfigServerUpdate.prototype.getMsWithoutUpdateShowWarning = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigServerUpdate} returns this
 */
proto.ProtoConfigServerUpdate.prototype.setMsWithoutUpdateShowWarning = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 ms_without_update_disconnect = 6;
 * @return {number}
 */
proto.ProtoConfigServerUpdate.prototype.getMsWithoutUpdateDisconnect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigServerUpdate} returns this
 */
proto.ProtoConfigServerUpdate.prototype.setMsWithoutUpdateDisconnect = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoConfigSkill.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoConfigSkill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoConfigSkill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigSkill.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cooldownMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    executionDurationMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targettingRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    targettingAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    targettingRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    staminaCost: jspb.Message.getFieldWithDefault(msg, 7, 0),
    targettingOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoConfigSkill}
 */
proto.ProtoConfigSkill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoConfigSkill;
  return proto.ProtoConfigSkill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoConfigSkill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoConfigSkill}
 */
proto.ProtoConfigSkill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCooldownMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExecutionDurationMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargettingRadius(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargettingAngle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargettingRange(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStaminaCost(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargettingOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoConfigSkill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoConfigSkill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoConfigSkill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoConfigSkill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCooldownMs();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExecutionDurationMs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTargettingRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTargettingAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getTargettingRange();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getStaminaCost();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTargettingOffset();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ProtoConfigSkill.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 cooldown_ms = 2;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getCooldownMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setCooldownMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 execution_duration_ms = 3;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getExecutionDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setExecutionDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float targetting_radius = 4;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getTargettingRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setTargettingRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float targetting_angle = 5;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getTargettingAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setTargettingAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float targetting_range = 6;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getTargettingRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setTargettingRange = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint64 stamina_cost = 7;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getStaminaCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setStaminaCost = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float targetting_offset = 8;
 * @return {number}
 */
proto.ProtoConfigSkill.prototype.getTargettingOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoConfigSkill} returns this
 */
proto.ProtoConfigSkill.prototype.setTargettingOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoGameState.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoGameState.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoGameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoGameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playersMap: (f = msg.getPlayersMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    projectilesMap: (f = msg.getProjectilesMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    playerTimestampsMap: (f = msg.getPlayerTimestampsMap()) ? f.toObject(includeInstance, undefined) : [],
    serverTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    zone: (f = msg.getZone()) && proto.ProtoZone.toObject(includeInstance, f),
    killfeedList: jspb.Message.toObjectList(msg.getKillfeedList(),
    proto.ProtoKillEntry.toObject, includeInstance),
    damageTakenMap: (f = msg.getDamageTakenMap()) ? f.toObject(includeInstance, undefined) : [],
    damageDoneMap: (f = msg.getDamageDoneMap()) ? f.toObject(includeInstance, undefined) : [],
    powerUpsMap: (f = msg.getPowerUpsMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    status: jspb.Message.getFieldWithDefault(msg, 11, 0),
    startGameTimestamp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    obstaclesMap: (f = msg.getObstaclesMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    poolsMap: (f = msg.getPoolsMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    cratesMap: (f = msg.getCratesMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    bushesMap: (f = msg.getBushesMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : [],
    trapsMap: (f = msg.getTrapsMap()) ? f.toObject(includeInstance, proto.ProtoEntity.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoGameState}
 */
proto.ProtoGameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoGameState;
  return proto.ProtoGameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoGameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoGameState}
 */
proto.ProtoGameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = msg.getPlayersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 3:
      var value = msg.getProjectilesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 4:
      var value = msg.getPlayerTimestampsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerTimestamp(value);
      break;
    case 6:
      var value = new proto.ProtoZone;
      reader.readMessage(value,proto.ProtoZone.deserializeBinaryFromReader);
      msg.setZone(value);
      break;
    case 7:
      var value = new proto.ProtoKillEntry;
      reader.readMessage(value,proto.ProtoKillEntry.deserializeBinaryFromReader);
      msg.addKillfeed(value);
      break;
    case 8:
      var value = msg.getDamageTakenMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 9:
      var value = msg.getDamageDoneMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 10:
      var value = msg.getPowerUpsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 11:
      var value = /** @type {!proto.GameStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartGameTimestamp(value);
      break;
    case 13:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 14:
      var value = msg.getObstaclesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 15:
      var value = msg.getPoolsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 16:
      var value = msg.getCratesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 17:
      var value = msg.getBushesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    case 18:
      var value = msg.getTrapsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.ProtoEntity.deserializeBinaryFromReader, 0, new proto.ProtoEntity());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoGameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoGameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoGameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getProjectilesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getPlayerTimestampsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getServerTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getZone();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ProtoZone.serializeBinaryToWriter
    );
  }
  f = message.getKillfeedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ProtoKillEntry.serializeBinaryToWriter
    );
  }
  f = message.getDamageTakenMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getDamageDoneMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getPowerUpsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getStartGameTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getObstaclesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getPoolsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getCratesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getBushesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
  f = message.getTrapsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.ProtoEntity.serializeBinaryToWriter);
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.ProtoGameState.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<uint64, ProtoEntity> players = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getPlayersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearPlayersMap = function() {
  this.getPlayersMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> projectiles = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getProjectilesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearProjectilesMap = function() {
  this.getProjectilesMap().clear();
  return this;
};


/**
 * map<uint64, int64> player_timestamps = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.ProtoGameState.prototype.getPlayerTimestampsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearPlayerTimestampsMap = function() {
  this.getPlayerTimestampsMap().clear();
  return this;
};


/**
 * optional int64 server_timestamp = 5;
 * @return {number}
 */
proto.ProtoGameState.prototype.getServerTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.setServerTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ProtoZone zone = 6;
 * @return {?proto.ProtoZone}
 */
proto.ProtoGameState.prototype.getZone = function() {
  return /** @type{?proto.ProtoZone} */ (
    jspb.Message.getWrapperField(this, proto.ProtoZone, 6));
};


/**
 * @param {?proto.ProtoZone|undefined} value
 * @return {!proto.ProtoGameState} returns this
*/
proto.ProtoGameState.prototype.setZone = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearZone = function() {
  return this.setZone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameState.prototype.hasZone = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ProtoKillEntry killfeed = 7;
 * @return {!Array<!proto.ProtoKillEntry>}
 */
proto.ProtoGameState.prototype.getKillfeedList = function() {
  return /** @type{!Array<!proto.ProtoKillEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoKillEntry, 7));
};


/**
 * @param {!Array<!proto.ProtoKillEntry>} value
 * @return {!proto.ProtoGameState} returns this
*/
proto.ProtoGameState.prototype.setKillfeedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ProtoKillEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoKillEntry}
 */
proto.ProtoGameState.prototype.addKillfeed = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ProtoKillEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearKillfeedList = function() {
  return this.setKillfeedList([]);
};


/**
 * map<uint64, uint64> damage_taken = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.ProtoGameState.prototype.getDamageTakenMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearDamageTakenMap = function() {
  this.getDamageTakenMap().clear();
  return this;
};


/**
 * map<uint64, uint64> damage_done = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.ProtoGameState.prototype.getDamageDoneMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearDamageDoneMap = function() {
  this.getDamageDoneMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> power_ups = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getPowerUpsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearPowerUpsMap = function() {
  this.getPowerUpsMap().clear();
  return this;
};


/**
 * optional GameStatus status = 11;
 * @return {!proto.GameStatus}
 */
proto.ProtoGameState.prototype.getStatus = function() {
  return /** @type {!proto.GameStatus} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.GameStatus} value
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional int64 start_game_timestamp = 12;
 * @return {number}
 */
proto.ProtoGameState.prototype.getStartGameTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.setStartGameTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * map<uint64, ProtoEntity> items = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> obstacles = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getObstaclesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearObstaclesMap = function() {
  this.getObstaclesMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> pools = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getPoolsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearPoolsMap = function() {
  this.getPoolsMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> crates = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getCratesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearCratesMap = function() {
  this.getCratesMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> bushes = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getBushesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearBushesMap = function() {
  this.getBushesMap().clear();
  return this;
};


/**
 * map<uint64, ProtoEntity> traps = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ProtoEntity>}
 */
proto.ProtoGameState.prototype.getTrapsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ProtoEntity>} */ (
      jspb.Message.getMapField(this, 18, opt_noLazyCreate,
      proto.ProtoEntity));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoGameState} returns this
 */
proto.ProtoGameState.prototype.clearTrapsMap = function() {
  this.getTrapsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoEntity.repeatedFields_ = [7,8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoEntity.oneofGroups_ = [[12,13,14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.ProtoEntity.AditionalInfoCase = {
  ADITIONAL_INFO_NOT_SET: 0,
  PLAYER: 12,
  PROJECTILE: 13,
  OBSTACLE: 14,
  POWER_UP: 15,
  ITEM: 16,
  POOL: 17,
  CRATE: 18,
  BUSH: 19,
  TRAP: 20
};

/**
 * @return {proto.ProtoEntity.AditionalInfoCase}
 */
proto.ProtoEntity.prototype.getAditionalInfoCase = function() {
  return /** @type {proto.ProtoEntity.AditionalInfoCase} */(jspb.Message.computeOneofCase(this, proto.ProtoEntity.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    category: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shape: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    position: (f = msg.getPosition()) && proto.ProtoPosition.toObject(includeInstance, f),
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
    proto.ProtoPosition.toObject, includeInstance),
    collidesWithList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    direction: (f = msg.getDirection()) && proto.ProtoDirection.toObject(includeInstance, f),
    isMoving: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    player: (f = msg.getPlayer()) && proto.ProtoPlayer.toObject(includeInstance, f),
    projectile: (f = msg.getProjectile()) && proto.ProtoProjectile.toObject(includeInstance, f),
    obstacle: (f = msg.getObstacle()) && proto.ProtoObstacle.toObject(includeInstance, f),
    powerUp: (f = msg.getPowerUp()) && proto.ProtoPowerUp.toObject(includeInstance, f),
    item: (f = msg.getItem()) && proto.ProtoItem.toObject(includeInstance, f),
    pool: (f = msg.getPool()) && proto.ProtoPool.toObject(includeInstance, f),
    crate: (f = msg.getCrate()) && proto.ProtoCrate.toObject(includeInstance, f),
    bush: (f = msg.getBush()) && proto.ProtoBush.toObject(includeInstance, f),
    trap: (f = msg.getTrap()) && proto.ProtoTrap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoEntity}
 */
proto.ProtoEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoEntity;
  return proto.ProtoEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoEntity}
 */
proto.ProtoEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShape(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.ProtoPosition;
      reader.readMessage(value,proto.ProtoPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    case 7:
      var value = new proto.ProtoPosition;
      reader.readMessage(value,proto.ProtoPosition.deserializeBinaryFromReader);
      msg.addVertices(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCollidesWith(values[i]);
      }
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 10:
      var value = new proto.ProtoDirection;
      reader.readMessage(value,proto.ProtoDirection.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMoving(value);
      break;
    case 12:
      var value = new proto.ProtoPlayer;
      reader.readMessage(value,proto.ProtoPlayer.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    case 13:
      var value = new proto.ProtoProjectile;
      reader.readMessage(value,proto.ProtoProjectile.deserializeBinaryFromReader);
      msg.setProjectile(value);
      break;
    case 14:
      var value = new proto.ProtoObstacle;
      reader.readMessage(value,proto.ProtoObstacle.deserializeBinaryFromReader);
      msg.setObstacle(value);
      break;
    case 15:
      var value = new proto.ProtoPowerUp;
      reader.readMessage(value,proto.ProtoPowerUp.deserializeBinaryFromReader);
      msg.setPowerUp(value);
      break;
    case 16:
      var value = new proto.ProtoItem;
      reader.readMessage(value,proto.ProtoItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 17:
      var value = new proto.ProtoPool;
      reader.readMessage(value,proto.ProtoPool.deserializeBinaryFromReader);
      msg.setPool(value);
      break;
    case 18:
      var value = new proto.ProtoCrate;
      reader.readMessage(value,proto.ProtoCrate.deserializeBinaryFromReader);
      msg.setCrate(value);
      break;
    case 19:
      var value = new proto.ProtoBush;
      reader.readMessage(value,proto.ProtoBush.deserializeBinaryFromReader);
      msg.setBush(value);
      break;
    case 20:
      var value = new proto.ProtoTrap;
      reader.readMessage(value,proto.ProtoTrap.deserializeBinaryFromReader);
      msg.setTrap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShape();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ProtoPosition.serializeBinaryToWriter
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ProtoPosition.serializeBinaryToWriter
    );
  }
  f = message.getCollidesWithList();
  if (f.length > 0) {
    writer.writePackedUint64(
      8,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ProtoDirection.serializeBinaryToWriter
    );
  }
  f = message.getIsMoving();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ProtoPlayer.serializeBinaryToWriter
    );
  }
  f = message.getProjectile();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ProtoProjectile.serializeBinaryToWriter
    );
  }
  f = message.getObstacle();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.ProtoObstacle.serializeBinaryToWriter
    );
  }
  f = message.getPowerUp();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.ProtoPowerUp.serializeBinaryToWriter
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.ProtoItem.serializeBinaryToWriter
    );
  }
  f = message.getPool();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.ProtoPool.serializeBinaryToWriter
    );
  }
  f = message.getCrate();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.ProtoCrate.serializeBinaryToWriter
    );
  }
  f = message.getBush();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.ProtoBush.serializeBinaryToWriter
    );
  }
  f = message.getTrap();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ProtoTrap.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ProtoEntity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string category = 2;
 * @return {string}
 */
proto.ProtoEntity.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string shape = 3;
 * @return {string}
 */
proto.ProtoEntity.prototype.getShape = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setShape = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.ProtoEntity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ProtoPosition position = 5;
 * @return {?proto.ProtoPosition}
 */
proto.ProtoEntity.prototype.getPosition = function() {
  return /** @type{?proto.ProtoPosition} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPosition, 5));
};


/**
 * @param {?proto.ProtoPosition|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float radius = 6;
 * @return {number}
 */
proto.ProtoEntity.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * repeated ProtoPosition vertices = 7;
 * @return {!Array<!proto.ProtoPosition>}
 */
proto.ProtoEntity.prototype.getVerticesList = function() {
  return /** @type{!Array<!proto.ProtoPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoPosition, 7));
};


/**
 * @param {!Array<!proto.ProtoPosition>} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setVerticesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ProtoPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoPosition}
 */
proto.ProtoEntity.prototype.addVertices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ProtoPosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearVerticesList = function() {
  return this.setVerticesList([]);
};


/**
 * repeated uint64 collides_with = 8;
 * @return {!Array<number>}
 */
proto.ProtoEntity.prototype.getCollidesWithList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setCollidesWithList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.addCollidesWith = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearCollidesWithList = function() {
  return this.setCollidesWithList([]);
};


/**
 * optional float speed = 9;
 * @return {number}
 */
proto.ProtoEntity.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional ProtoDirection direction = 10;
 * @return {?proto.ProtoDirection}
 */
proto.ProtoEntity.prototype.getDirection = function() {
  return /** @type{?proto.ProtoDirection} */ (
    jspb.Message.getWrapperField(this, proto.ProtoDirection, 10));
};


/**
 * @param {?proto.ProtoDirection|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool is_moving = 11;
 * @return {boolean}
 */
proto.ProtoEntity.prototype.getIsMoving = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.setIsMoving = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional ProtoPlayer player = 12;
 * @return {?proto.ProtoPlayer}
 */
proto.ProtoEntity.prototype.getPlayer = function() {
  return /** @type{?proto.ProtoPlayer} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPlayer, 12));
};


/**
 * @param {?proto.ProtoPlayer|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setPlayer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ProtoProjectile projectile = 13;
 * @return {?proto.ProtoProjectile}
 */
proto.ProtoEntity.prototype.getProjectile = function() {
  return /** @type{?proto.ProtoProjectile} */ (
    jspb.Message.getWrapperField(this, proto.ProtoProjectile, 13));
};


/**
 * @param {?proto.ProtoProjectile|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setProjectile = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearProjectile = function() {
  return this.setProjectile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasProjectile = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ProtoObstacle obstacle = 14;
 * @return {?proto.ProtoObstacle}
 */
proto.ProtoEntity.prototype.getObstacle = function() {
  return /** @type{?proto.ProtoObstacle} */ (
    jspb.Message.getWrapperField(this, proto.ProtoObstacle, 14));
};


/**
 * @param {?proto.ProtoObstacle|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setObstacle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearObstacle = function() {
  return this.setObstacle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasObstacle = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ProtoPowerUp power_up = 15;
 * @return {?proto.ProtoPowerUp}
 */
proto.ProtoEntity.prototype.getPowerUp = function() {
  return /** @type{?proto.ProtoPowerUp} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPowerUp, 15));
};


/**
 * @param {?proto.ProtoPowerUp|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setPowerUp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearPowerUp = function() {
  return this.setPowerUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasPowerUp = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ProtoItem item = 16;
 * @return {?proto.ProtoItem}
 */
proto.ProtoEntity.prototype.getItem = function() {
  return /** @type{?proto.ProtoItem} */ (
    jspb.Message.getWrapperField(this, proto.ProtoItem, 16));
};


/**
 * @param {?proto.ProtoItem|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasItem = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ProtoPool pool = 17;
 * @return {?proto.ProtoPool}
 */
proto.ProtoEntity.prototype.getPool = function() {
  return /** @type{?proto.ProtoPool} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPool, 17));
};


/**
 * @param {?proto.ProtoPool|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setPool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearPool = function() {
  return this.setPool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasPool = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ProtoCrate crate = 18;
 * @return {?proto.ProtoCrate}
 */
proto.ProtoEntity.prototype.getCrate = function() {
  return /** @type{?proto.ProtoCrate} */ (
    jspb.Message.getWrapperField(this, proto.ProtoCrate, 18));
};


/**
 * @param {?proto.ProtoCrate|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setCrate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearCrate = function() {
  return this.setCrate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasCrate = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ProtoBush bush = 19;
 * @return {?proto.ProtoBush}
 */
proto.ProtoEntity.prototype.getBush = function() {
  return /** @type{?proto.ProtoBush} */ (
    jspb.Message.getWrapperField(this, proto.ProtoBush, 19));
};


/**
 * @param {?proto.ProtoBush|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setBush = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearBush = function() {
  return this.setBush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasBush = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ProtoTrap trap = 20;
 * @return {?proto.ProtoTrap}
 */
proto.ProtoEntity.prototype.getTrap = function() {
  return /** @type{?proto.ProtoTrap} */ (
    jspb.Message.getWrapperField(this, proto.ProtoTrap, 20));
};


/**
 * @param {?proto.ProtoTrap|undefined} value
 * @return {!proto.ProtoEntity} returns this
*/
proto.ProtoEntity.prototype.setTrap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.ProtoEntity.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoEntity} returns this
 */
proto.ProtoEntity.prototype.clearTrap = function() {
  return this.setTrap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoEntity.prototype.hasTrap = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoPlayer.repeatedFields_ = [3,10,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    health: jspb.Message.getFieldWithDefault(msg, 1, 0),
    killCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentActionsList: jspb.Message.toObjectList(msg.getCurrentActionsList(),
    proto.ProtoPlayerAction.toObject, includeInstance),
    availableStamina: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxStamina: jspb.Message.getFieldWithDefault(msg, 5, 0),
    staminaInterval: jspb.Message.getFieldWithDefault(msg, 6, 0),
    rechargingStamina: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    characterName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    powerUps: jspb.Message.getFieldWithDefault(msg, 9, 0),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.ProtoEffect.toObject, includeInstance),
    inventory: (f = msg.getInventory()) && proto.ProtoItem.toObject(includeInstance, f),
    cooldownsMap: (f = msg.getCooldownsMap()) ? f.toObject(includeInstance, undefined) : [],
    visiblePlayersList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    onBush: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    forcedMovement: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPlayer}
 */
proto.ProtoPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPlayer;
  return proto.ProtoPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPlayer}
 */
proto.ProtoPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHealth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKillCount(value);
      break;
    case 3:
      var value = new proto.ProtoPlayerAction;
      reader.readMessage(value,proto.ProtoPlayerAction.deserializeBinaryFromReader);
      msg.addCurrentActions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvailableStamina(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxStamina(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStaminaInterval(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRechargingStamina(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterName(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPowerUps(value);
      break;
    case 10:
      var value = new proto.ProtoEffect;
      reader.readMessage(value,proto.ProtoEffect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    case 11:
      var value = new proto.ProtoItem;
      reader.readMessage(value,proto.ProtoItem.deserializeBinaryFromReader);
      msg.setInventory(value);
      break;
    case 12:
      var value = msg.getCooldownsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    case 13:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVisiblePlayers(values[i]);
      }
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnBush(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForcedMovement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealth();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getKillCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCurrentActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtoPlayerAction.serializeBinaryToWriter
    );
  }
  f = message.getAvailableStamina();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMaxStamina();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getStaminaInterval();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getRechargingStamina();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCharacterName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPowerUps();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ProtoEffect.serializeBinaryToWriter
    );
  }
  f = message.getInventory();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ProtoItem.serializeBinaryToWriter
    );
  }
  f = message.getCooldownsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getVisiblePlayersList();
  if (f.length > 0) {
    writer.writePackedUint64(
      13,
      f
    );
  }
  f = message.getOnBush();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getForcedMovement();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional uint64 health = 1;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 kill_count = 2;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getKillCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setKillCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ProtoPlayerAction current_actions = 3;
 * @return {!Array<!proto.ProtoPlayerAction>}
 */
proto.ProtoPlayer.prototype.getCurrentActionsList = function() {
  return /** @type{!Array<!proto.ProtoPlayerAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoPlayerAction, 3));
};


/**
 * @param {!Array<!proto.ProtoPlayerAction>} value
 * @return {!proto.ProtoPlayer} returns this
*/
proto.ProtoPlayer.prototype.setCurrentActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtoPlayerAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoPlayerAction}
 */
proto.ProtoPlayer.prototype.addCurrentActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtoPlayerAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.clearCurrentActionsList = function() {
  return this.setCurrentActionsList([]);
};


/**
 * optional uint64 available_stamina = 4;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getAvailableStamina = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setAvailableStamina = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 max_stamina = 5;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getMaxStamina = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setMaxStamina = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 stamina_interval = 6;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getStaminaInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setStaminaInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool recharging_stamina = 7;
 * @return {boolean}
 */
proto.ProtoPlayer.prototype.getRechargingStamina = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setRechargingStamina = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string character_name = 8;
 * @return {string}
 */
proto.ProtoPlayer.prototype.getCharacterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setCharacterName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 power_ups = 9;
 * @return {number}
 */
proto.ProtoPlayer.prototype.getPowerUps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setPowerUps = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated ProtoEffect effects = 10;
 * @return {!Array<!proto.ProtoEffect>}
 */
proto.ProtoPlayer.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.ProtoEffect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoEffect, 10));
};


/**
 * @param {!Array<!proto.ProtoEffect>} value
 * @return {!proto.ProtoPlayer} returns this
*/
proto.ProtoPlayer.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ProtoEffect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoEffect}
 */
proto.ProtoPlayer.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ProtoEffect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};


/**
 * optional ProtoItem inventory = 11;
 * @return {?proto.ProtoItem}
 */
proto.ProtoPlayer.prototype.getInventory = function() {
  return /** @type{?proto.ProtoItem} */ (
    jspb.Message.getWrapperField(this, proto.ProtoItem, 11));
};


/**
 * @param {?proto.ProtoItem|undefined} value
 * @return {!proto.ProtoPlayer} returns this
*/
proto.ProtoPlayer.prototype.setInventory = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.clearInventory = function() {
  return this.setInventory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoPlayer.prototype.hasInventory = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * map<string, uint64> cooldowns = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ProtoPlayer.prototype.getCooldownsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.clearCooldownsMap = function() {
  this.getCooldownsMap().clear();
  return this;
};


/**
 * repeated uint64 visible_players = 13;
 * @return {!Array<number>}
 */
proto.ProtoPlayer.prototype.getVisiblePlayersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setVisiblePlayersList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.addVisiblePlayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.clearVisiblePlayersList = function() {
  return this.setVisiblePlayersList([]);
};


/**
 * optional bool on_bush = 14;
 * @return {boolean}
 */
proto.ProtoPlayer.prototype.getOnBush = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setOnBush = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool forced_movement = 15;
 * @return {boolean}
 */
proto.ProtoPlayer.prototype.getForcedMovement = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoPlayer} returns this
 */
proto.ProtoPlayer.prototype.setForcedMovement = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoEffect.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoEffect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoEffect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoEffect.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    durationMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoEffect}
 */
proto.ProtoEffect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoEffect;
  return proto.ProtoEffect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoEffect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoEffect}
 */
proto.ProtoEffect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoEffect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoEffect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoEffect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoEffect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ProtoEffect.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoEffect} returns this
 */
proto.ProtoEffect.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 duration_ms = 2;
 * @return {number}
 */
proto.ProtoEffect.prototype.getDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoEffect} returns this
 */
proto.ProtoEffect.prototype.setDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 id = 3;
 * @return {number}
 */
proto.ProtoEffect.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoEffect} returns this
 */
proto.ProtoEffect.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoItem}
 */
proto.ProtoItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoItem;
  return proto.ProtoItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoItem}
 */
proto.ProtoItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ProtoItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoItem} returns this
 */
proto.ProtoItem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoProjectile.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoProjectile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoProjectile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoProjectile.toObject = function(includeInstance, msg) {
  var f, obj = {
    damage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ownerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skillKey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoProjectile}
 */
proto.ProtoProjectile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoProjectile;
  return proto.ProtoProjectile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoProjectile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoProjectile}
 */
proto.ProtoProjectile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDamage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerId(value);
      break;
    case 3:
      var value = /** @type {!proto.ProjectileStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkillKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoProjectile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoProjectile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoProjectile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoProjectile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDamage();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSkillKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 damage = 1;
 * @return {number}
 */
proto.ProtoProjectile.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoProjectile} returns this
 */
proto.ProtoProjectile.prototype.setDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 owner_id = 2;
 * @return {number}
 */
proto.ProtoProjectile.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoProjectile} returns this
 */
proto.ProtoProjectile.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ProjectileStatus status = 3;
 * @return {!proto.ProjectileStatus}
 */
proto.ProtoProjectile.prototype.getStatus = function() {
  return /** @type {!proto.ProjectileStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ProjectileStatus} value
 * @return {!proto.ProtoProjectile} returns this
 */
proto.ProtoProjectile.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string skill_key = 4;
 * @return {string}
 */
proto.ProtoProjectile.prototype.getSkillKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoProjectile} returns this
 */
proto.ProtoProjectile.prototype.setSkillKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collisionable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    status: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoObstacle}
 */
proto.ProtoObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoObstacle;
  return proto.ProtoObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoObstacle}
 */
proto.ProtoObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCollisionable(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollisionable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string color = 1;
 * @return {string}
 */
proto.ProtoObstacle.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoObstacle} returns this
 */
proto.ProtoObstacle.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool collisionable = 2;
 * @return {boolean}
 */
proto.ProtoObstacle.prototype.getCollisionable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoObstacle} returns this
 */
proto.ProtoObstacle.prototype.setCollisionable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.ProtoObstacle.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoObstacle} returns this
 */
proto.ProtoObstacle.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPowerUp.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPowerUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPowerUp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPowerUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPowerUp}
 */
proto.ProtoPowerUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPowerUp;
  return proto.ProtoPowerUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPowerUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPowerUp}
 */
proto.ProtoPowerUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerId(value);
      break;
    case 2:
      var value = /** @type {!proto.ProtoPowerUpstatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPowerUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPowerUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPowerUp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPowerUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint64 owner_id = 1;
 * @return {number}
 */
proto.ProtoPowerUp.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPowerUp} returns this
 */
proto.ProtoPowerUp.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ProtoPowerUpstatus status = 2;
 * @return {!proto.ProtoPowerUpstatus}
 */
proto.ProtoPowerUp.prototype.getStatus = function() {
  return /** @type {!proto.ProtoPowerUpstatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ProtoPowerUpstatus} value
 * @return {!proto.ProtoPowerUp} returns this
 */
proto.ProtoPowerUp.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoCrate.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoCrate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoCrate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoCrate.toObject = function(includeInstance, msg) {
  var f, obj = {
    health: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amountOfPowerUps: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoCrate}
 */
proto.ProtoCrate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoCrate;
  return proto.ProtoCrate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoCrate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoCrate}
 */
proto.ProtoCrate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHealth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountOfPowerUps(value);
      break;
    case 3:
      var value = /** @type {!proto.ProtoCrateStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoCrate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoCrate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoCrate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoCrate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealth();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAmountOfPowerUps();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 health = 1;
 * @return {number}
 */
proto.ProtoCrate.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoCrate} returns this
 */
proto.ProtoCrate.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 amount_of_power_ups = 2;
 * @return {number}
 */
proto.ProtoCrate.prototype.getAmountOfPowerUps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoCrate} returns this
 */
proto.ProtoCrate.prototype.setAmountOfPowerUps = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ProtoCrateStatus status = 3;
 * @return {!proto.ProtoCrateStatus}
 */
proto.ProtoCrate.prototype.getStatus = function() {
  return /** @type {!proto.ProtoCrateStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ProtoCrateStatus} value
 * @return {!proto.ProtoCrate} returns this
 */
proto.ProtoCrate.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoPool.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPool.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.ProtoEffect.toObject, includeInstance),
    skillKey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPool}
 */
proto.ProtoPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPool;
  return proto.ProtoPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPool}
 */
proto.ProtoPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerId(value);
      break;
    case 2:
      var value = /** @type {!proto.ProtoPoolStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.ProtoEffect;
      reader.readMessage(value,proto.ProtoEffect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkillKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtoEffect.serializeBinaryToWriter
    );
  }
  f = message.getSkillKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 owner_id = 1;
 * @return {number}
 */
proto.ProtoPool.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPool} returns this
 */
proto.ProtoPool.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ProtoPoolStatus status = 2;
 * @return {!proto.ProtoPoolStatus}
 */
proto.ProtoPool.prototype.getStatus = function() {
  return /** @type {!proto.ProtoPoolStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ProtoPoolStatus} value
 * @return {!proto.ProtoPool} returns this
 */
proto.ProtoPool.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated ProtoEffect effects = 3;
 * @return {!Array<!proto.ProtoEffect>}
 */
proto.ProtoPool.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.ProtoEffect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoEffect, 3));
};


/**
 * @param {!Array<!proto.ProtoEffect>} value
 * @return {!proto.ProtoPool} returns this
*/
proto.ProtoPool.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtoEffect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoEffect}
 */
proto.ProtoPool.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtoEffect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoPool} returns this
 */
proto.ProtoPool.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};


/**
 * optional string skill_key = 4;
 * @return {string}
 */
proto.ProtoPool.prototype.getSkillKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoPool} returns this
 */
proto.ProtoPool.prototype.setSkillKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoBush.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoBush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoBush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoBush.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoBush}
 */
proto.ProtoBush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoBush;
  return proto.ProtoBush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoBush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoBush}
 */
proto.ProtoBush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoBush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoBush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoBush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoBush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoTrap.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoTrap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoTrap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoTrap.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoTrap}
 */
proto.ProtoTrap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoTrap;
  return proto.ProtoTrap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoTrap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoTrap}
 */
proto.ProtoTrap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.ProtoTrapStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoTrap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoTrap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoTrap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoTrap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 owner_id = 1;
 * @return {number}
 */
proto.ProtoTrap.prototype.getOwnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoTrap} returns this
 */
proto.ProtoTrap.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ProtoTrap.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoTrap} returns this
 */
proto.ProtoTrap.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ProtoTrapStatus status = 3;
 * @return {!proto.ProtoTrapStatus}
 */
proto.ProtoTrap.prototype.getStatus = function() {
  return /** @type {!proto.ProtoTrapStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ProtoTrapStatus} value
 * @return {!proto.ProtoTrap} returns this
 */
proto.ProtoTrap.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoPlayerAction.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoPlayerAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoPlayerAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPlayerAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    destination: (f = msg.getDestination()) && proto.ProtoPosition.toObject(includeInstance, f),
    direction: (f = msg.getDirection()) && proto.ProtoPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoPlayerAction}
 */
proto.ProtoPlayerAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoPlayerAction;
  return proto.ProtoPlayerAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoPlayerAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoPlayerAction}
 */
proto.ProtoPlayerAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtoPlayerActionType} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    case 3:
      var value = new proto.ProtoPosition;
      reader.readMessage(value,proto.ProtoPosition.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 4:
      var value = new proto.ProtoPosition;
      reader.readMessage(value,proto.ProtoPosition.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoPlayerAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoPlayerAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoPlayerAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoPlayerAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ProtoPosition.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ProtoPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoPlayerActionType action = 1;
 * @return {!proto.ProtoPlayerActionType}
 */
proto.ProtoPlayerAction.prototype.getAction = function() {
  return /** @type {!proto.ProtoPlayerActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ProtoPlayerActionType} value
 * @return {!proto.ProtoPlayerAction} returns this
 */
proto.ProtoPlayerAction.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 duration = 2;
 * @return {number}
 */
proto.ProtoPlayerAction.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoPlayerAction} returns this
 */
proto.ProtoPlayerAction.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ProtoPosition destination = 3;
 * @return {?proto.ProtoPosition}
 */
proto.ProtoPlayerAction.prototype.getDestination = function() {
  return /** @type{?proto.ProtoPosition} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPosition, 3));
};


/**
 * @param {?proto.ProtoPosition|undefined} value
 * @return {!proto.ProtoPlayerAction} returns this
*/
proto.ProtoPlayerAction.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoPlayerAction} returns this
 */
proto.ProtoPlayerAction.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoPlayerAction.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProtoPosition direction = 4;
 * @return {?proto.ProtoPosition}
 */
proto.ProtoPlayerAction.prototype.getDirection = function() {
  return /** @type{?proto.ProtoPosition} */ (
    jspb.Message.getWrapperField(this, proto.ProtoPosition, 4));
};


/**
 * @param {?proto.ProtoPosition|undefined} value
 * @return {!proto.ProtoPlayerAction} returns this
*/
proto.ProtoPlayerAction.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoPlayerAction} returns this
 */
proto.ProtoPlayerAction.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoPlayerAction.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoMove.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    direction: (f = msg.getDirection()) && proto.ProtoDirection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoMove}
 */
proto.ProtoMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoMove;
  return proto.ProtoMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoMove}
 */
proto.ProtoMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoDirection;
      reader.readMessage(value,proto.ProtoDirection.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoDirection.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoDirection direction = 1;
 * @return {?proto.ProtoDirection}
 */
proto.ProtoMove.prototype.getDirection = function() {
  return /** @type{?proto.ProtoDirection} */ (
    jspb.Message.getWrapperField(this, proto.ProtoDirection, 1));
};


/**
 * @param {?proto.ProtoDirection|undefined} value
 * @return {!proto.ProtoMove} returns this
*/
proto.ProtoMove.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoMove} returns this
 */
proto.ProtoMove.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoMove.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoAttack.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoAttack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoAttack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoAttack.toObject = function(includeInstance, msg) {
  var f, obj = {
    skill: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parameters: (f = msg.getParameters()) && proto.ProtoAttackParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoAttack}
 */
proto.ProtoAttack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoAttack;
  return proto.ProtoAttack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoAttack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoAttack}
 */
proto.ProtoAttack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSkill(value);
      break;
    case 2:
      var value = new proto.ProtoAttackParameters;
      reader.readMessage(value,proto.ProtoAttackParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoAttack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoAttack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoAttack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoAttack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkill();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtoAttackParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional string skill = 1;
 * @return {string}
 */
proto.ProtoAttack.prototype.getSkill = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoAttack} returns this
 */
proto.ProtoAttack.prototype.setSkill = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProtoAttackParameters parameters = 2;
 * @return {?proto.ProtoAttackParameters}
 */
proto.ProtoAttack.prototype.getParameters = function() {
  return /** @type{?proto.ProtoAttackParameters} */ (
    jspb.Message.getWrapperField(this, proto.ProtoAttackParameters, 2));
};


/**
 * @param {?proto.ProtoAttackParameters|undefined} value
 * @return {!proto.ProtoAttack} returns this
*/
proto.ProtoAttack.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoAttack} returns this
 */
proto.ProtoAttack.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoAttack.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoAttackParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoAttackParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoAttackParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoAttackParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.ProtoDirection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoAttackParameters}
 */
proto.ProtoAttackParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoAttackParameters;
  return proto.ProtoAttackParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoAttackParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoAttackParameters}
 */
proto.ProtoAttackParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoDirection;
      reader.readMessage(value,proto.ProtoDirection.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoAttackParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoAttackParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoAttackParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoAttackParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoDirection.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProtoDirection target = 1;
 * @return {?proto.ProtoDirection}
 */
proto.ProtoAttackParameters.prototype.getTarget = function() {
  return /** @type{?proto.ProtoDirection} */ (
    jspb.Message.getWrapperField(this, proto.ProtoDirection, 1));
};


/**
 * @param {?proto.ProtoDirection|undefined} value
 * @return {!proto.ProtoAttackParameters} returns this
*/
proto.ProtoAttackParameters.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoAttackParameters} returns this
 */
proto.ProtoAttackParameters.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoAttackParameters.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoUseItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoUseItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoUseItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoUseItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoUseItem}
 */
proto.ProtoUseItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoUseItem;
  return proto.ProtoUseItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoUseItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoUseItem}
 */
proto.ProtoUseItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoUseItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoUseItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoUseItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoUseItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 item = 1;
 * @return {number}
 */
proto.ProtoUseItem.prototype.getItem = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoUseItem} returns this
 */
proto.ProtoUseItem.prototype.setItem = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoSelectBounty.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoSelectBounty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoSelectBounty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoSelectBounty.toObject = function(includeInstance, msg) {
  var f, obj = {
    bountyQuestId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoSelectBounty}
 */
proto.ProtoSelectBounty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoSelectBounty;
  return proto.ProtoSelectBounty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoSelectBounty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoSelectBounty}
 */
proto.ProtoSelectBounty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBountyQuestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoSelectBounty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoSelectBounty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoSelectBounty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoSelectBounty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBountyQuestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bounty_quest_id = 1;
 * @return {string}
 */
proto.ProtoSelectBounty.prototype.getBountyQuestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoSelectBounty} returns this
 */
proto.ProtoSelectBounty.prototype.setBountyQuestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoToggleZone.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoToggleZone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoToggleZone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoToggleZone.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoToggleZone}
 */
proto.ProtoToggleZone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoToggleZone;
  return proto.ProtoToggleZone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoToggleZone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoToggleZone}
 */
proto.ProtoToggleZone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoToggleZone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoToggleZone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoToggleZone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoToggleZone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoToggleBots.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoToggleBots.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoToggleBots} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoToggleBots.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoToggleBots}
 */
proto.ProtoToggleBots.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoToggleBots;
  return proto.ProtoToggleBots.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoToggleBots} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoToggleBots}
 */
proto.ProtoToggleBots.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoToggleBots.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoToggleBots.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoToggleBots} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoToggleBots.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoChangeTickrate.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoChangeTickrate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoChangeTickrate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoChangeTickrate.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickrate: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoChangeTickrate}
 */
proto.ProtoChangeTickrate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoChangeTickrate;
  return proto.ProtoChangeTickrate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoChangeTickrate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoChangeTickrate}
 */
proto.ProtoChangeTickrate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTickrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoChangeTickrate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoChangeTickrate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoChangeTickrate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoChangeTickrate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickrate();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 tickrate = 1;
 * @return {number}
 */
proto.ProtoChangeTickrate.prototype.getTickrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoChangeTickrate} returns this
 */
proto.ProtoChangeTickrate.prototype.setTickrate = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoGameAction.oneofGroups_ = [[1,2,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.ProtoGameAction.ActionTypeCase = {
  ACTION_TYPE_NOT_SET: 0,
  MOVE: 1,
  ATTACK: 2,
  USE_ITEM: 4,
  SELECT_BOUNTY: 5,
  TOGGLE_ZONE: 6,
  TOGGLE_BOTS: 7,
  CHANGE_TICKRATE: 8
};

/**
 * @return {proto.ProtoGameAction.ActionTypeCase}
 */
proto.ProtoGameAction.prototype.getActionTypeCase = function() {
  return /** @type {proto.ProtoGameAction.ActionTypeCase} */(jspb.Message.computeOneofCase(this, proto.ProtoGameAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoGameAction.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoGameAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoGameAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    move: (f = msg.getMove()) && proto.ProtoMove.toObject(includeInstance, f),
    attack: (f = msg.getAttack()) && proto.ProtoAttack.toObject(includeInstance, f),
    useItem: (f = msg.getUseItem()) && proto.ProtoUseItem.toObject(includeInstance, f),
    selectBounty: (f = msg.getSelectBounty()) && proto.ProtoSelectBounty.toObject(includeInstance, f),
    toggleZone: (f = msg.getToggleZone()) && proto.ProtoToggleZone.toObject(includeInstance, f),
    toggleBots: (f = msg.getToggleBots()) && proto.ProtoToggleBots.toObject(includeInstance, f),
    changeTickrate: (f = msg.getChangeTickrate()) && proto.ProtoChangeTickrate.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoGameAction}
 */
proto.ProtoGameAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoGameAction;
  return proto.ProtoGameAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoGameAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoGameAction}
 */
proto.ProtoGameAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtoMove;
      reader.readMessage(value,proto.ProtoMove.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 2:
      var value = new proto.ProtoAttack;
      reader.readMessage(value,proto.ProtoAttack.deserializeBinaryFromReader);
      msg.setAttack(value);
      break;
    case 4:
      var value = new proto.ProtoUseItem;
      reader.readMessage(value,proto.ProtoUseItem.deserializeBinaryFromReader);
      msg.setUseItem(value);
      break;
    case 5:
      var value = new proto.ProtoSelectBounty;
      reader.readMessage(value,proto.ProtoSelectBounty.deserializeBinaryFromReader);
      msg.setSelectBounty(value);
      break;
    case 6:
      var value = new proto.ProtoToggleZone;
      reader.readMessage(value,proto.ProtoToggleZone.deserializeBinaryFromReader);
      msg.setToggleZone(value);
      break;
    case 7:
      var value = new proto.ProtoToggleBots;
      reader.readMessage(value,proto.ProtoToggleBots.deserializeBinaryFromReader);
      msg.setToggleBots(value);
      break;
    case 8:
      var value = new proto.ProtoChangeTickrate;
      reader.readMessage(value,proto.ProtoChangeTickrate.deserializeBinaryFromReader);
      msg.setChangeTickrate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoGameAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoGameAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoGameAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoGameAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtoMove.serializeBinaryToWriter
    );
  }
  f = message.getAttack();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtoAttack.serializeBinaryToWriter
    );
  }
  f = message.getUseItem();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ProtoUseItem.serializeBinaryToWriter
    );
  }
  f = message.getSelectBounty();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ProtoSelectBounty.serializeBinaryToWriter
    );
  }
  f = message.getToggleZone();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ProtoToggleZone.serializeBinaryToWriter
    );
  }
  f = message.getToggleBots();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ProtoToggleBots.serializeBinaryToWriter
    );
  }
  f = message.getChangeTickrate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ProtoChangeTickrate.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional ProtoMove move = 1;
 * @return {?proto.ProtoMove}
 */
proto.ProtoGameAction.prototype.getMove = function() {
  return /** @type{?proto.ProtoMove} */ (
    jspb.Message.getWrapperField(this, proto.ProtoMove, 1));
};


/**
 * @param {?proto.ProtoMove|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProtoAttack attack = 2;
 * @return {?proto.ProtoAttack}
 */
proto.ProtoGameAction.prototype.getAttack = function() {
  return /** @type{?proto.ProtoAttack} */ (
    jspb.Message.getWrapperField(this, proto.ProtoAttack, 2));
};


/**
 * @param {?proto.ProtoAttack|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setAttack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearAttack = function() {
  return this.setAttack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasAttack = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProtoUseItem use_item = 4;
 * @return {?proto.ProtoUseItem}
 */
proto.ProtoGameAction.prototype.getUseItem = function() {
  return /** @type{?proto.ProtoUseItem} */ (
    jspb.Message.getWrapperField(this, proto.ProtoUseItem, 4));
};


/**
 * @param {?proto.ProtoUseItem|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setUseItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearUseItem = function() {
  return this.setUseItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasUseItem = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProtoSelectBounty select_bounty = 5;
 * @return {?proto.ProtoSelectBounty}
 */
proto.ProtoGameAction.prototype.getSelectBounty = function() {
  return /** @type{?proto.ProtoSelectBounty} */ (
    jspb.Message.getWrapperField(this, proto.ProtoSelectBounty, 5));
};


/**
 * @param {?proto.ProtoSelectBounty|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setSelectBounty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearSelectBounty = function() {
  return this.setSelectBounty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasSelectBounty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ProtoToggleZone toggle_zone = 6;
 * @return {?proto.ProtoToggleZone}
 */
proto.ProtoGameAction.prototype.getToggleZone = function() {
  return /** @type{?proto.ProtoToggleZone} */ (
    jspb.Message.getWrapperField(this, proto.ProtoToggleZone, 6));
};


/**
 * @param {?proto.ProtoToggleZone|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setToggleZone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearToggleZone = function() {
  return this.setToggleZone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasToggleZone = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ProtoToggleBots toggle_bots = 7;
 * @return {?proto.ProtoToggleBots}
 */
proto.ProtoGameAction.prototype.getToggleBots = function() {
  return /** @type{?proto.ProtoToggleBots} */ (
    jspb.Message.getWrapperField(this, proto.ProtoToggleBots, 7));
};


/**
 * @param {?proto.ProtoToggleBots|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setToggleBots = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearToggleBots = function() {
  return this.setToggleBots(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasToggleBots = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ProtoChangeTickrate change_tickrate = 8;
 * @return {?proto.ProtoChangeTickrate}
 */
proto.ProtoGameAction.prototype.getChangeTickrate = function() {
  return /** @type{?proto.ProtoChangeTickrate} */ (
    jspb.Message.getWrapperField(this, proto.ProtoChangeTickrate, 8));
};


/**
 * @param {?proto.ProtoChangeTickrate|undefined} value
 * @return {!proto.ProtoGameAction} returns this
*/
proto.ProtoGameAction.prototype.setChangeTickrate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.ProtoGameAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.clearChangeTickrate = function() {
  return this.setChangeTickrate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoGameAction.prototype.hasChangeTickrate = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.ProtoGameAction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoGameAction} returns this
 */
proto.ProtoGameAction.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoZone.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoZone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoZone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoZone.toObject = function(includeInstance, msg) {
  var f, obj = {
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    nextZoneChangeTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shrinking: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoZone}
 */
proto.ProtoZone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoZone;
  return proto.ProtoZone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoZone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoZone}
 */
proto.ProtoZone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextZoneChangeTimestamp(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShrinking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoZone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoZone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoZone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoZone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNextZoneChangeTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getShrinking();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional float radius = 1;
 * @return {number}
 */
proto.ProtoZone.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoZone} returns this
 */
proto.ProtoZone.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.ProtoZone.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoZone} returns this
 */
proto.ProtoZone.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 next_zone_change_timestamp = 3;
 * @return {number}
 */
proto.ProtoZone.prototype.getNextZoneChangeTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoZone} returns this
 */
proto.ProtoZone.prototype.setNextZoneChangeTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool shrinking = 4;
 * @return {boolean}
 */
proto.ProtoZone.prototype.getShrinking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ProtoZone} returns this
 */
proto.ProtoZone.prototype.setShrinking = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoKillEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoKillEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoKillEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoKillEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    killerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    victimId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoKillEntry}
 */
proto.ProtoKillEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoKillEntry;
  return proto.ProtoKillEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoKillEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoKillEntry}
 */
proto.ProtoKillEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKillerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVictimId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoKillEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoKillEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoKillEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoKillEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKillerId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVictimId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 killer_id = 1;
 * @return {number}
 */
proto.ProtoKillEntry.prototype.getKillerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoKillEntry} returns this
 */
proto.ProtoKillEntry.prototype.setKillerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 victim_id = 2;
 * @return {number}
 */
proto.ProtoKillEntry.prototype.getVictimId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoKillEntry} returns this
 */
proto.ProtoKillEntry.prototype.setVictimId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoBountyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoBountyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoBountyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoBountyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    questType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    reward: (f = msg.getReward()) && proto.ProtoCurrencyReward.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoBountyInfo}
 */
proto.ProtoBountyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoBountyInfo;
  return proto.ProtoBountyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoBountyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoBountyInfo}
 */
proto.ProtoBountyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestType(value);
      break;
    case 4:
      var value = new proto.ProtoCurrencyReward;
      reader.readMessage(value,proto.ProtoCurrencyReward.deserializeBinaryFromReader);
      msg.setReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoBountyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoBountyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoBountyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoBountyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuestType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReward();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ProtoCurrencyReward.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ProtoBountyInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoBountyInfo} returns this
 */
proto.ProtoBountyInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.ProtoBountyInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoBountyInfo} returns this
 */
proto.ProtoBountyInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quest_type = 3;
 * @return {string}
 */
proto.ProtoBountyInfo.prototype.getQuestType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoBountyInfo} returns this
 */
proto.ProtoBountyInfo.prototype.setQuestType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ProtoCurrencyReward reward = 4;
 * @return {?proto.ProtoCurrencyReward}
 */
proto.ProtoBountyInfo.prototype.getReward = function() {
  return /** @type{?proto.ProtoCurrencyReward} */ (
    jspb.Message.getWrapperField(this, proto.ProtoCurrencyReward, 4));
};


/**
 * @param {?proto.ProtoCurrencyReward|undefined} value
 * @return {!proto.ProtoBountyInfo} returns this
*/
proto.ProtoBountyInfo.prototype.setReward = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoBountyInfo} returns this
 */
proto.ProtoBountyInfo.prototype.clearReward = function() {
  return this.setReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoBountyInfo.prototype.hasReward = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoCurrencyReward.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoCurrencyReward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoCurrencyReward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoCurrencyReward.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoCurrencyReward}
 */
proto.ProtoCurrencyReward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtoCurrencyReward;
  return proto.ProtoCurrencyReward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoCurrencyReward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoCurrencyReward}
 */
proto.ProtoCurrencyReward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoCurrencyReward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtoCurrencyReward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoCurrencyReward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoCurrencyReward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.ProtoCurrencyReward.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProtoCurrencyReward} returns this
 */
proto.ProtoCurrencyReward.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.ProtoCurrencyReward.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProtoCurrencyReward} returns this
 */
proto.ProtoCurrencyReward.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.GameStatus = {
  PREPARING: 0,
  RUNNING: 1,
  ENDED: 2,
  SELECTING_BOUNTY: 3
};

/**
 * @enum {number}
 */
proto.ProjectileStatus = {
  ACTIVE: 0,
  EXPLODED: 1,
  CONSUMED: 2
};

/**
 * @enum {number}
 */
proto.ProtoCrateStatus = {
  FINE: 0,
  DESTROYED: 1
};

/**
 * @enum {number}
 */
proto.ProtoPowerUpstatus = {
  AVAILABLE: 0,
  TAKEN: 1,
  UNAVAILABLE: 2
};

/**
 * @enum {number}
 */
proto.ProtoPlayerActionType = {
  MOVING: 0,
  STARTING_SKILL_1: 1,
  STARTING_SKILL_2: 2,
  EXECUTING_SKILL_1: 3,
  EXECUTING_SKILL_2: 4,
  EXECUTING_SKILL_3: 5
};

/**
 * @enum {number}
 */
proto.ProtoTrapStatus = {
  PENDING: 0,
  PREPARED: 1,
  TRIGGERED: 2,
  USED: 3
};

/**
 * @enum {number}
 */
proto.ProtoPoolStatus = {
  WAITING: 0,
  READY: 1
};

goog.object.extend(exports, proto);
