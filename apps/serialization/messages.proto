syntax = "proto3";

/*
 * Shared structs
 */

/*
 * Direction is a vector with a magnitude of 1
 */
message DirectionPB {
  float x = 1;
  float y = 2;
}

/*
 * Position of an entity in the arena
 */
message PositionPB {
  float x = 1;
  float y = 2;
}

message LobbyEventPB {
  oneof event {
    LeaveLobbyPB leave = 1;
    LeftLobbyPB left = 2;
    JoinedLobbyPB joined = 3;
    GameStatePB game = 4;
  }
}

message LeaveLobbyPB {}
message LeftLobbyPB { }
message JoinedLobbyPB { }

message GameEventPB {
  oneof event {
    GameJoinedPB joined = 1;
    GameStatePB update = 2;
    GameFinishedPB finished = 3;
    PingUpdatePB ping_update = 4;
    PingPB ping = 5;
    ToggleBotsPB toggle_bots = 6;
  }
}

message PingPB {
  int64 timestamp_now = 1;
}

message PingUpdatePB {
  uint64 latency = 1;
}

message GameFinishedPB {
  EntityPB winner = 1;
  map<uint64, EntityPB> players = 2;
}

message GameJoinedPB {
  uint64 player_id = 1;
  ConfigurationPB config = 2;
  repeated BountyInfoPB bounties = 3;
}

message ConfigurationPB {
  ConfigGamePB game = 1;
  ConfigMapPB map = 2;
  repeated ConfigCharacterPB characters = 3;
  ClientConfigPB client_config = 4;
}

message ConfigGamePB {
  float tick_rate_ms = 1;
  float bounty_pick_time_ms = 2;
  float start_game_time_ms = 3;
}

message ConfigMapPB {
  float radius = 1;
}

message ConfigCharacterPB {
  string name = 1;
  bool active = 2;
  float base_speed = 3;
  float base_size = 4;
  uint64 base_health = 5;
  uint64 max_inventory_size = 6;
  map<string, ConfigSkillPB> skills = 7;
}

message ClientConfigPB {
  ConfigServerUpdatePB server_update = 1;
}

message ConfigServerUpdatePB {
  uint64 timestamp_difference_samples_to_check_warning = 1;
  uint64 timestamp_differences_samples_max_length = 2;
  uint64 show_warning_threshold = 3;
  uint64 stop_warning_threshold = 4;
  uint64 ms_without_update_show_warning = 5;
  uint64 ms_without_update_disconnect = 6;
}

message ConfigSkillPB {
  string name = 1;
  uint64 cooldown_ms = 2;
  uint64 execution_duration_ms = 3;
  float targetting_radius = 4;
  float targetting_angle = 5;
  float targetting_range = 6;
  uint64 stamina_cost = 7;
  float targetting_offset = 8;
}


/*
 * Game State
 */
message GameStatePB {
  string game_id = 1;
  map<uint64, EntityPB> players = 2;
  map<uint64, EntityPB> projectiles = 3;
  map<uint64, int64> player_timestamps = 4;
  int64 server_timestamp = 5;
  ZonePB zone = 6;
  repeated KillEntryPB killfeed = 7;
  map<uint64, uint64> damage_taken = 8;
  map<uint64, uint64> damage_done = 9;
  map<uint64, EntityPB> power_ups = 10;
  GameStatusPB status = 11;
  int64 start_game_timestamp = 12;
  map<uint64, EntityPB> items = 13;
  map<uint64, EntityPB> obstacles = 14;
  map<uint64, EntityPB> pools = 15;
  map<uint64, EntityPB> crates = 16;
  map<uint64, EntityPB> bushes = 17;
  map<uint64, EntityPB> traps = 18;
}

enum GameStatusPB {
  PREPARING = 0;
  RUNNING = 1;
  ENDED = 2;
  SELECTING_BOUNTY = 3;
}

/*
 * Info about an entity
 * id: unique identifier
 * category: player, projectile, obstacle, item.
 * shape: circle, point, line, polygon, point.
 * name: unique name of the entity
 * position: position of the entity (polyogns and lines don't have a position)
 * radius: radius of the entity (only circles have a radius)
 * vertices: vertices of the entity (only polygons and lines have vertices)
 * collides_with: entities that the entity is colliding with
 * speed: speed of the entity
 * direction: direction of the entity if it is moving
 * is_moving: true if the entity is moving
 */
message EntityPB {
  uint64 id = 1;
  string category = 2;
  string shape = 3;
  string name = 4;
  PositionPB position = 5;
  float radius = 6;
  repeated PositionPB vertices = 7;
  repeated uint64 collides_with = 8;
  float speed = 9;
  DirectionPB direction = 10;
  bool is_moving = 11;
  oneof aditional_info {
    PlayerPB player = 12;
    ProjectilePB projectile = 13;
    ObstaclePB obstacle = 14;
    PowerUpPB power_up = 15;
    ItemPB item = 16;
    PoolPB pool = 17;
    CratePB crate = 18;
    BushPB bush = 19;
    TrapPB trap = 20;
  }
}

message PlayerPB {
  uint64 health = 1;
  uint64 kill_count = 2;
  repeated PlayerActionPB current_actions = 3;
  uint64 available_stamina = 4;
  uint64 max_stamina = 5;
  uint64 stamina_interval = 6;
  bool recharging_stamina = 7;
  string character_name = 8;
  uint64 power_ups = 9;
  repeated EffectPB effects = 10;
  ItemPB inventory = 11;
  map<string, uint64> cooldowns = 12;
  repeated uint64 visible_players = 13;
  bool on_bush = 14;
  bool forced_movement = 15;
  bool bounty_completed = 16;
}

message EffectPB {
  string name = 1;
  uint32 duration_ms = 2;
  uint64 id = 3;
}

message ItemPB {
  string name = 2;
}

message ProjectilePB {
  uint64 damage = 1;
  uint64 owner_id = 2;
  ProjectileStatusPB status = 3;
  string skill_key = 4;
}

enum ProjectileStatusPB {
  ACTIVE = 0;
  EXPLODED = 1;
  CONSUMED = 2;
}

message ObstaclePB {
  string color = 1;
  bool collisionable = 2;
  string status = 3;
}

message PowerUpPB {
  uint64 owner_id = 1;
  PowerUpstatusPB status = 2;
}

message CratePB {
  uint64 health = 1;
  uint64 amount_of_power_ups = 2;
  CrateStatusPB status = 3;
}

enum CrateStatusPB {
  FINE = 0;
  DESTROYED = 1;
}

enum  PowerUpstatusPB {
  AVAILABLE = 0;
  TAKEN = 1;
  UNAVAILABLE = 2;
}

message PoolPB {
  uint64 owner_id = 1;
  PoolStatusPB status = 2;
  repeated EffectPB effects = 3;
  string skill_key = 4;
}

message BushPB {
}

message TrapPB {
  uint64 owner_id = 1;
  string name = 2;
  TrapStatusPB status = 3;
}

message PlayerActionPB {
    PlayerActionTypePB action = 1;
    uint64 duration = 2;
    PositionPB destination = 3;
    PositionPB direction = 4;
}

enum PlayerActionTypePB {
    MOVING = 0;
    STARTING_SKILL_1 = 1;
    STARTING_SKILL_2 = 2;
    EXECUTING_SKILL_1 = 3;
    EXECUTING_SKILL_2 = 4;
    EXECUTING_SKILL_3 = 5;
}

enum TrapStatusPB {
  PENDING = 0;
  PREPARED = 1;
  TRIGGERED = 2;
  USED = 3;
}

enum PoolStatusPB {
  WAITING = 0;
  READY = 1;
}

/*
 * Player Actions
 */
message MovePB {
  DirectionPB direction = 1;
}

message AttackPB {
  string skill = 1;
  AttackParametersPB parameters = 2;
}

message AttackParametersPB {
  DirectionPB target = 1;
}

message UseItemPB {
  uint64 item = 1;
}

message SelectBountyPB {
  string bounty_quest_id = 1;
}

message ToggleZonePB { }
message ToggleBotsPB { }
message ChangeTickratePB {
  int64 tickrate = 1;
}

message GameActionPB {
  oneof action_type {
    MovePB move = 1;
    AttackPB attack = 2;
    UseItemPB use_item = 4;
    SelectBountyPB select_bounty = 5;
    ToggleZonePB toggle_zone = 6;
    ToggleBotsPB toggle_bots = 7;
    ChangeTickratePB change_tickrate = 8;
    PongPB pong = 9;
  }
  int64 timestamp = 3;
}

message PongPB {
  int64 ping_timestamp = 1;
}

message ZonePB {
  float radius = 1;
  bool enabled = 2;
  int64 next_zone_change_timestamp = 3;
  bool shrinking = 4;
}

message KillEntryPB {
  uint64 killer_id = 1;
  uint64 victim_id = 2;
}

message BountyInfoPB {
  string id = 1;
  string description = 2;
  string quest_type = 3;
  CurrencyRewardPB reward = 4;
}

message CurrencyRewardPB {
  string currency  = 1;
  int64 amount = 2;
}
